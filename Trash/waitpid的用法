waitpid()用法
[ 2010-6-22 12:31:00 | By: cc810610186 ]
 

pid_t waitpid( pid_t pid, int * status, int options );

函数说明

waitpid() 会暂时停止目前进程的执行，直到有信号来到或子进程结束。如果在调用 waitpid() 时子进程已经结束，则 waitpid() 会立即返回子进程结束状态值。子进程的结束状态值会由参数 status 返回，而子进程的进程识别码也会一并返回。如果不在意结束状态值，则参数 status 可以设成 NULL。 waitpid() 如果执行成功则返回子进程识别码(PID)，如果有错误发生则返回，返回值-1。失败原因存于 errno 中。

各参数意义如下:

pid=pid 等待进程识别码为 pid 的子进程。

pid=-1 等待任何子进程，相当于 wait()。

pid= 0 等待进程组识别码与目前进程相同的任何子进程。

参数 option 可以为 0（不使用时） 或下面的 OR（” | “） 组合:

WNOHANG : 如果没有任何已经结束的子进程则马上返回, 不予以等待。

WUNTRACED: 如果子进程进入暂停执行情况则马上返回,但结束状态不予以理会。子进程的结束状态返回后存于 status,底下有几个宏可判别结束情况。

用于检查wait和waitpid两个函数返回终止状态的宏:

这两个函数返回的子进程状态都保存在statloc指针中, 用以下3个宏可以检查该状态:

WIFEXITED(status): 若为正常终止，则为真. 此时可执行

WEXITSTATUS(status): 取子进程传送给exit或_exit参数的低8位

WIFSIGNALED(status): 若为异常终止，则为真。此时可执行

WTERMSIG(status): 取使子进程终止的信号编号

WIFSTOPPED(status): 若为当前暂停子进程，则为真。此时可执行

WSTOPSIG(status): 取使子进程暂停的信号编号.

