.. _tutorial-index:

######################
  The Python tutorial Python 入门指南
######################

:Release: |version|
:Date: |today|

Python is an easy to learn, powerful programming language. It has efficient
high-level data structures and a simple but effective approach to
object-oriented programming. Python's elegant syntax and dynamic typing,
together with its interpreted nature, make it an ideal language for scripting
and rapid application development in many areas on most platforms.

Python 是一种容易学习的强大的编程语言。它包含了高效的高级数据结构，能够用简单而高效的方式进行
面向对象编程。 Python 优雅的语法和和动态类型，以及它天然的解释能力，使其成为了大多数平台上广
泛适用于各领域的理想脚本语言和开发环境。

The Python interpreter and the extensive standard library are freely available
in source or binary form for all major platforms from the Python Web site,
http://www.python.org/, and may be freely distributed. The same site also
contains distributions of and pointers to many free third party Python modules,
programs and tools, and additional documentation.

Python 解释器及其扩展标准库的源码和编译版本可以从 Python 的 Web 站点 http://www.python.org 
及其所有镜像站点上获得，并且可以自由发布。该站点上也提供了  Python 的一些第三方模块，程序，
工具以及附加的文档。

The Python interpreter is easily extended with new functions and data types
implemented in C or C++ (or other languages callable from C). Python is also
suitable as an extension language for customizable applications.

Python 的解释器可以很容易的通过 C 或者 C++ （或者其它可以通过 C 调用的语言）扩展新函数和数
据类型。 Python 也可以作为定制应用的扩展语言。

This tutorial introduces the reader informally to the basic concepts and
features of the Python language and system. It helps to have a Python
interpreter handy for hands-on experience, but all examples are self-contained,
so the tutorial can be read off-line as well.

本手册向读者介绍 Python 语言及其体系的基本知识与概念。配合 Python 解释器学习会很有帮助，
不过文中己包含所有的完整例子，所以这本手册也可以离线阅读。

For a description of standard objects and modules, see the Python Library
Reference document. The Python Reference Manual gives a more formal definition
of the language. To write extensions in C or C++, read Extending and Embedding
the Python Interpreter and Python/C API Reference. There are also several books
covering Python in depth.

需要有关标准对象和模块的详细介绍的话，请查询 Python 库参考手册 。 Python 参考手册提供了更多
的关于语言方面的正式说明。需要编写 C 或 C++扩展，请阅读 Python 解释器的扩展和集成 以及 
Python/C API 参考手册。这几本书涵盖了各个深度上的 Python 知识。

This tutorial does not attempt to be comprehensive and cover every single
feature, or even every commonly used feature. Instead, it introduces many of
Python's most noteworthy features, and will give you a good idea of the
language's flavor and style. After reading it, you will be able to read and
write Python modules and programs, and you will be ready to learn more about the
various Python library modules described in the Python Library Reference.

本手册不会涵盖 Python 的所有功能，也不侍去解释用到的所有相关的知识。相反，它介绍了许多 Python 
中最引人注目的功能，这会对读者掌握这门语言的风格大有帮助。读过它后，你应该可以阅读和编写 Python 
块和程序，接下来可以从 Python 库参考手册中进一步学习 Python 多种多样的库和模块。

The :ref:`glossary` is also worth going through.

.. toctree::

   appetite.rst
   interpreter.rst
   introduction.rst
   controlflow.rst
   datastructures.rst
   modules.rst
   inputoutput.rst
   errors.rst
   classes.rst
   stdlib.rst
   stdlib2.rst
   whatnow.rst
   interactive.rst
   floatingpoint.rst
